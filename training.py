# import pandas as pd
# from sklearn.ensemble import RandomForestRegressor
# from datetime import datetime, timedelta

# # Load the dataS
# df = pd.read_csv('final_input_file.csv')

# # Remove duplicate entries
# df = df.drop_duplicates()

# # Convert 'DateTime' to datetime object with the correct format
# df['DateTime'] = pd.to_datetime(df['DateTime'], format='%d-%m-%Y %H:%M')

# # Create new features
# df['Hour'] = df['DateTime'].dt.hour
# df['DayOfWeek'] = df['DateTime'].dt.dayofweek
# df['Month'] = df['DateTime'].dt.month

# # Convert DateTime to ordinal
# df['DateTime'] = df['DateTime'].map(datetime.toordinal)

# # Define the feature columns
# feature_columns = ['DateTime', 'Power generated by system | (MW)', 'Hour', 'DayOfWeek', 'Month']

# # Define the target columns
# target_columns = ['Air temperature | (°C)', 'Pressure | (atm)', 'Wind speed | (m/s)']

# # Create a Random Forest model
# model = RandomForestRegressor(n_estimators=100, random_state=42)

# # Fit the model to the entire data
# X = df[feature_columns]
# y = df[target_columns]
# model.fit(X, y)

# # Create a new DataFrame for the dates you want to predict
# future_dates = pd.date_range(start='2024-01-01', end='2024-03-31').tolist()
# future_df = pd.DataFrame({'DateTime': future_dates})

# # Create the same features for the future dates
# future_df['Hour'] = future_df['DateTime'].dt.hour
# future_df['DayOfWeek'] = future_df['DateTime'].dt.dayofweek
# future_df['Month'] = future_df['DateTime'].dt.month

# # Convert DateTime to ordinal
# future_df['DateTime'] = future_df['DateTime'].map(datetime.toordinal)

# # Assume 'Power generated by system | (MW)' for the future dates is the same as the last known value
# future_df['Power generated by system | (MW)'] = df['Power generated by system | (MW)'].iloc[-1]

# # Use the model to make predictions on the future data
# future_predictions = model.predict(future_df[feature_columns])

# # Save the predictions to a DataFrame
# predictions_df = pd.DataFrame(future_predictions, columns=target_columns)
# predictions_df['DateTime'] = future_dates

# # Save the predictions to a CSV file
# predictions_df.to_csv('future_predictions.csv', index=False)






import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from datetime import datetime, timedelta

# Load the data
df = pd.read_csv('final_input_file.csv')

# Remove duplicate entries
df = df.drop_duplicates()

# Convert 'DateTime' to datetime object with the correct format
df['DateTime'] = pd.to_datetime(df['DateTime'], format='%d-%m-%Y %H:%M')

# Create new features
df['Hour'] = df['DateTime'].dt.hour
df['DayOfWeek'] = df['DateTime'].dt.dayofweek
df['Month'] = df['DateTime'].dt.month

# Convert DateTime to ordinal
df['DateTime'] = df['DateTime'].map(datetime.toordinal)

# Define the feature columns
feature_columns = ['DateTime', 'Power generated by system | (MW)', 'Hour', 'DayOfWeek', 'Month']

# Define the target columns
target_columns = ['Air temperature | (°C)', 'Pressure | (atm)', 'Wind speed | (m/s)']

# Create a Random Forest model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the entire data
X = df[feature_columns]
y = df[target_columns]
model.fit(X, y)

# Create a new DataFrame for the dates you want to predict
future_dates = pd.date_range(start='2024-01-01', end='2024-03-31').tolist()
future_df = pd.DataFrame({'DateTime': future_dates})

# Create the same features for the future dates
future_df['Hour'] = future_df['DateTime'].dt.hour
future_df['DayOfWeek'] = future_df['DateTime'].dt.dayofweek
future_df['Month'] = future_df['DateTime'].dt.month

# Convert DateTime to ordinal
future_df['DateTime'] = future_df['DateTime'].map(datetime.toordinal)

# Assume 'Power generated by system | (MW)' for the future dates is the same as the last known value
future_df['Power generated by system | (MW)'] = df['Power generated by system | (MW)'].iloc[-1]

# Use the model to make predictions on the future data
future_predictions = model.predict(future_df[feature_columns])

# Save the predictions to a DataFrame
predictions_df = pd.DataFrame(future_predictions, columns=target_columns)
predictions_df['DateTime'] = future_dates

# Define the feature columns for the power prediction
feature_columns_power = ['DateTime', 'Air temperature | (°C)', 'Pressure | (atm)', 'Wind speed | (m/s)', 'Hour', 'DayOfWeek', 'Month']

# Define the target column for the power prediction
target_column_power = 'Power generated by system | (MW)'

# Create a Random Forest model for the power prediction
model_power = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model to the entire data
X_power = df[feature_columns_power]
y_power = df[target_column_power]
model_power.fit(X_power, y_power)

# Add the predicted values for 'Air temperature | (°C)', 'Pressure | (atm)', and 'Wind speed | (m/s)' to the future_df
future_df['Air temperature | (°C)'] = predictions_df['Air temperature | (°C)']
future_df['Pressure | (atm)'] = predictions_df['Pressure | (atm)']
future_df['Wind speed | (m/s)'] = predictions_df['Wind speed | (m/s)']

# Use the model to make predictions on the future data
future_predictions_power = model_power.predict(future_df[feature_columns_power])

# Add the predicted power to the predictions_df
predictions_df['Predicted power generated | (MW)'] = future_predictions_power

# Save the predictions to a CSV file
predictions_df.to_csv('future_predictions2.csv', index=False)